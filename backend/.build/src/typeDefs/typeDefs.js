"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDefs = exports.PotentialMatchUserInputType = void 0;
//import {gql} from 'apollo-server-express';
var apollo_server_lambda_1 = require("apollo-server-lambda");
//TODO: change inout ype for age to be Int! but after you configure the birthdate resolver
//TODO: need to add apollo server error handling
//TODO: ADD enum check for states and countt maybe
var LocationType = "\n    city: String!,\n    state: String!,\n    country: String!\n";
var MessageType = "\n _id: ID!,\n sender: String!,\n receiver: String!,\n text: String!\n createdAt: String\n";
var DeletedType = "\n isDeleted: Boolean,\n deletedAt: String,\n";
var SquashNodeType = "\n    sport: String!,\n    game_level: String!,\n";
var DataType = "\n    img_idx: Int!,\n    imageURL: String!,\n    filePath: String!\n";
var ImageData = "\n    img_idx: Int!,\n    file: FileUpload!\n";
var ageRange = "\n    minAge: Int!,\n    maxAge: Int!\n";
var PotentialMatchUserType = "\n    _id: ID!\n    first_name: String!\n    age: Int!\n    gender: String!\n    sports: [SquashNode!]!\n    description: String\n    location: LocationType!\n    image_set: [Data!]!\n";
var LikedByUserType = "\n    _id: ID!\n    first_name: String!\n    age: Int!\n    gender: String!\n    sports: [SquashNode!]!\n    description: String\n    location: LocationType!\n    image_set: [Data!]!\n";
var LikedByUserInputType = "\n    _id: ID!\n    first_name: String!\n    age: Int!\n    gender: String!\n    sports: [SquashNodeInput!]!\n    description: String\n    image_set: [DataInput!]!\n    location: LocationInput!\n";
var userExistT = "\n    isPhoneExist: Boolean!\n    isDeleted: Boolean!\n";
exports.PotentialMatchUserInputType = "\n    _id: ID!\n    first_name: String!\n    age: Int!\n    gender: String!\n    sports: [SquashNodeInput!]!\n    description: String\n    image_set: [DataInput!]!\n    location: LocationInput!\n";
var SquashType = "\n    first_name: String!\n    last_name: String!\n    _id: ID!\n    age: Int!\n    gender: String!\n    sports: [SquashNode!]!\n    location: Location!\n    description: String\n    image_set: [Data!]!\n    matches : [PotentialMatch!]\n    blocked_me : [PotentialMatch!]\n    i_blocked : [PotentialMatch!]\n    likes : [String!]\n    swipesPerDay: Int!\n    sportChangesPerDay: Int!\n    visableLikePerDay: Int!\n    dislikes : [String!]\n    likedByUSers: [LikedByUser!]\n    deleted: DeletedT\n    phoneNumber: String\n    email: String\n  ";
var SquashInputType = "\n    first_name: String!\n    last_name: String!\n    _id: ID!\n    age: Int!\n    gender: String!\n    sports: [SquashNodeInput!]!\n    location: LocationInput!\n    description: String\n    image_set: [DataInput!]!\n    deleted: DeletedInput\n    matches : [PotentialMatchInput!]\n    blocked_me : [PotentialMatchInput!]\n    i_blocked : [PotentialMatchInput!]\n    likes : [String!]\n    dislikes : [String!]\n    swipesPerDay: Int!\n    sportChangesPerDay: Int!\n    visableLikePerDay: Int!\n    likedByUSers: [LikedByUserInput!]\n    phoneNumber: String\n    email: String\n  ";
exports.typeDefs = (0, apollo_server_lambda_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type Message {\n    ", "\n  }\n  type Location {\n    ", "\n  }\n  input AgeRangeInput {\n    ", "\n  }\n  type DeletedT {\n    ", "\n  }\n  input DeletedInput {\n    ", "\n  }\n  input LocationInput {\n    ", "\n  }\n  type LocationType {\n    ", "\n  }\n  input LikedByUserInput {\n    ", "\n  }\n  type LikedByUser {\n    ", "\n  }\n  type userExistType {\n    ", "\n  }\n  scalar FileUpload\n  type Query {\n    messages(currentUserID: String!, matchedUserID:String!, offset: Int!, limit: Int!): [Message!]\n    hello: String!\n    squash(id: String!): Squash\n    squashes(limit: Int): [Squash!]\n    display(filaname: String): String\n    checkPhoneInput (phoneNumber: String!): userExistType!\n    queryProssibleMatches(_id: String!, offset: Int, limit: Int, location: LocationInput!, sport: String!, game_levels:[String!]!, ageRange: AgeRangeInput): [Squash!]\n    matchesNotOptim(_id: String!, offset: Int, limit: Int, location: LocationInput!, sport: String!, game_levels:[String!]!, ageRange: AgeRangeInput): [Squash!]\n    getSwipesPerDay(_id: String!): Int!\n  }\n  input SquashNodeInput {\n    ", "\n  }\n  type SquashNode {\n    ", "\n  }\n  type Squash {\n      ", "\n  }\n  input SquashInput {\n      ", "\n  }\n  type PotentialMatch {\n      ", "\n  }\n  input PotentialMatchInput {\n      ", "\n  }\n\n  type DisplayImage {\n    imageURL: String!\n    filePath: String!\n  }\n  input DataInput{\n    ", "\n  }\n  input ImageData{\n    ", "\n  }\n  type DataOutput{\n    imageURL: String!\n    filePath: String!\n  }\n  type Data{\n    ", "\n  }\n  type Result {\n    _id: String!\n    }\n  type Message2 {\n    sender: String!\n    }\n  type Subscription {\n    messagePosted: Message\n  }\n\n  type Mutation {\n    deleteImage(_id: String, img_idx: Int): [Data!]!\n    updateUserSports(_id: String!, sportsList: [SquashNodeInput!]!): String\n    updateName(_id: String!, first_name: String!, last_name: String): String\n    updateAge(_id: String!, age: Int): String\n    updateGender(_id: String!, gender: Int): String\n    updateDescription(_id: String!, description: String!): String\n    uploadFile(file: FileUpload!, _id: String, img_idx: Int): DisplayImage\n\n    updateLocation(check: String): String\n\n    updateLikes(_id: String!, likes: [String!], currentUserData: PotentialMatchInput!, isFromLikes: Boolean!): Squash\n    updateDislikes(_id: String!, dislikes: [String!], isFromLikes: Boolean!): Squash\n    updateMatches(currentUserId: String!, potentialMatchId: String!, currentUser: PotentialMatchInput, potentialMatch: PotentialMatchInput): Squash\n\n    postMessage2(sender: String, receiver: String, text: String): ID!\n\n    updateUserProfile(\n      _id: String!\n      first_name: String!\n      last_name: String!\n      age: Int!\n      gender: String!\n      sports: [SquashNodeInput!]!\n      location:LocationInput!\n      description: String!\n      add_local_images: [ImageData],\n      remove_uploaded_images: [DataInput],\n      original_uploaded_image_set: [DataInput!]!,\n    ): Squash\n\n    createSquash2(\n      _id: String!\n      first_name: String!\n      last_name: String!\n      age: Int!\n      gender: String!\n      sports: [SquashNodeInput!]!\n      location: LocationInput!\n      description: String!\n      image_set: [ImageData!]!\n      matches : [PotentialMatchInput!]\n      blocked_me : [PotentialMatchInput!]\n      i_blocked : [PotentialMatchInput!]\n      likes : [String!]\n      dislikes : [String!]\n      likedByUSers: [String!]\n      phoneNumber: String\n      email: String\n    ): Squash!\n\n    createSquashTestSamples(\n      _id: String!\n      first_name: String!\n      last_name: String!\n      age: Int!\n      gender: String!\n      sports: [SquashNodeInput!]!\n      location: LocationInput!\n      description: String!\n      image_set: [DataInput!]!\n    ): Squash!\n\n    updateUserProfileTestSamples(\n      _id1: String!\n      _id2: String!\n    ): Squash\n    updateGameLevelsToStrings: String\n    deleteSquash(_id: String, image_set: [DataInput!]): Boolean!\n    softDeleteUser(_id: String): String\n    deleteChatUser(_idUser: String, _idChatUser: String): String\n    testMut(name: Int!):Int\n    updateLikesTestSamples(_id: String!, likes: [String!]): Squash\n    updateLikesCurrentUserTestSamples(_id: String!, likes: [LikedByUserInput!]): Squash\n  }\n"], ["\n  type Message {\n    ", "\n  }\n  type Location {\n    ", "\n  }\n  input AgeRangeInput {\n    ", "\n  }\n  type DeletedT {\n    ", "\n  }\n  input DeletedInput {\n    ", "\n  }\n  input LocationInput {\n    ", "\n  }\n  type LocationType {\n    ", "\n  }\n  input LikedByUserInput {\n    ", "\n  }\n  type LikedByUser {\n    ", "\n  }\n  type userExistType {\n    ", "\n  }\n  scalar FileUpload\n  type Query {\n    messages(currentUserID: String!, matchedUserID:String!, offset: Int!, limit: Int!): [Message!]\n    hello: String!\n    squash(id: String!): Squash\n    squashes(limit: Int): [Squash!]\n    display(filaname: String): String\n    checkPhoneInput (phoneNumber: String!): userExistType!\n    queryProssibleMatches(_id: String!, offset: Int, limit: Int, location: LocationInput!, sport: String!, game_levels:[String!]!, ageRange: AgeRangeInput): [Squash!]\n    matchesNotOptim(_id: String!, offset: Int, limit: Int, location: LocationInput!, sport: String!, game_levels:[String!]!, ageRange: AgeRangeInput): [Squash!]\n    getSwipesPerDay(_id: String!): Int!\n  }\n  input SquashNodeInput {\n    ", "\n  }\n  type SquashNode {\n    ", "\n  }\n  type Squash {\n      ", "\n  }\n  input SquashInput {\n      ", "\n  }\n  type PotentialMatch {\n      ", "\n  }\n  input PotentialMatchInput {\n      ", "\n  }\n\n  type DisplayImage {\n    imageURL: String!\n    filePath: String!\n  }\n  input DataInput{\n    ", "\n  }\n  input ImageData{\n    ", "\n  }\n  type DataOutput{\n    imageURL: String!\n    filePath: String!\n  }\n  type Data{\n    ", "\n  }\n  type Result {\n    _id: String!\n    }\n  type Message2 {\n    sender: String!\n    }\n  type Subscription {\n    messagePosted: Message\n  }\n\n  type Mutation {\n    deleteImage(_id: String, img_idx: Int): [Data!]!\n    updateUserSports(_id: String!, sportsList: [SquashNodeInput!]!): String\n    updateName(_id: String!, first_name: String!, last_name: String): String\n    updateAge(_id: String!, age: Int): String\n    updateGender(_id: String!, gender: Int): String\n    updateDescription(_id: String!, description: String!): String\n    uploadFile(file: FileUpload!, _id: String, img_idx: Int): DisplayImage\n\n    updateLocation(check: String): String\n\n    updateLikes(_id: String!, likes: [String!], currentUserData: PotentialMatchInput!, isFromLikes: Boolean!): Squash\n    updateDislikes(_id: String!, dislikes: [String!], isFromLikes: Boolean!): Squash\n    updateMatches(currentUserId: String!, potentialMatchId: String!, currentUser: PotentialMatchInput, potentialMatch: PotentialMatchInput): Squash\n\n    postMessage2(sender: String, receiver: String, text: String): ID!\n\n    updateUserProfile(\n      _id: String!\n      first_name: String!\n      last_name: String!\n      age: Int!\n      gender: String!\n      sports: [SquashNodeInput!]!\n      location:LocationInput!\n      description: String!\n      add_local_images: [ImageData],\n      remove_uploaded_images: [DataInput],\n      original_uploaded_image_set: [DataInput!]!,\n    ): Squash\n\n    createSquash2(\n      _id: String!\n      first_name: String!\n      last_name: String!\n      age: Int!\n      gender: String!\n      sports: [SquashNodeInput!]!\n      location: LocationInput!\n      description: String!\n      image_set: [ImageData!]!\n      matches : [PotentialMatchInput!]\n      blocked_me : [PotentialMatchInput!]\n      i_blocked : [PotentialMatchInput!]\n      likes : [String!]\n      dislikes : [String!]\n      likedByUSers: [String!]\n      phoneNumber: String\n      email: String\n    ): Squash!\n\n    createSquashTestSamples(\n      _id: String!\n      first_name: String!\n      last_name: String!\n      age: Int!\n      gender: String!\n      sports: [SquashNodeInput!]!\n      location: LocationInput!\n      description: String!\n      image_set: [DataInput!]!\n    ): Squash!\n\n    updateUserProfileTestSamples(\n      _id1: String!\n      _id2: String!\n    ): Squash\n    updateGameLevelsToStrings: String\n    deleteSquash(_id: String, image_set: [DataInput!]): Boolean!\n    softDeleteUser(_id: String): String\n    deleteChatUser(_idUser: String, _idChatUser: String): String\n    testMut(name: Int!):Int\n    updateLikesTestSamples(_id: String!, likes: [String!]): Squash\n    updateLikesCurrentUserTestSamples(_id: String!, likes: [LikedByUserInput!]): Squash\n  }\n"])), MessageType, LocationType, ageRange, DeletedType, DeletedType, LocationType, LocationType, LikedByUserInputType, LikedByUserType, userExistT, SquashNodeType, SquashNodeType, SquashType, SquashInputType, PotentialMatchUserType, exports.PotentialMatchUserInputType, DataType, ImageData, DataType);
var templateObject_1;
